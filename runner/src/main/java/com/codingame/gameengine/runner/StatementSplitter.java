package com.codingame.gameengine.runner;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FilenameUtils;

/***
 *  Parse an HTML file and remove blocks between <!-- BEGIN keyword1 keyword2 --> and <!-- END -->
 *  Must contain a block <!-- LEAGUES level1 level2 level3 level4 -->
 */
 
public class StatementSplitter {
    
    private static final Pattern LEAGUE_MARKER = Pattern.compile("\\s*<!--\\s+LEAGUES\\s+(.+)\\s+-->\\s*");
    private static final Pattern BEGIN_MARKER = Pattern.compile("\\s*<!--\\s+BEGIN\\s+(.+)\\s+-->\\s*");
    private static final Pattern END_MARKER = Pattern.compile("\\s*<!--\\s+END\\s+-->\\s*");

    public static ExportReport generateSplittedStatement(Path sourceFolderPath) throws IOException {
        ExportReport exportReport = new ExportReport();
        Files.list(sourceFolderPath.resolve("config/")).forEach(p -> {
            String fileName = FilenameUtils.getName(p.toString());
            Matcher statementMatcher = Pattern.compile("gen_statement_([a-zA-Z][a-zA-Z]).html").matcher(fileName);
            if(statementMatcher.matches()) {
                String language = statementMatcher.group(1);

                //Retrieve content from the file
                List<String> lines = new ArrayList<>();
                try {
                    BufferedReader bufferedReader = new BufferedReader(new FileReader(p.toFile()));
                    
                    String statementContent = null;
                    while((statementContent = bufferedReader.readLine()) != null) {
                        lines.add(statementContent + '\n');
                    }
                    bufferedReader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                Matcher leagueMatcher;
                
                List<String> leagues = new ArrayList<>();
                for (String line : lines) {
                    leagueMatcher = LEAGUE_MARKER.matcher(line);
                    if(leagueMatcher.matches()) {
                        leagues.addAll(Arrays.asList(leagueMatcher.group(1).split(" ")));
                        break;
                    }
                }
                
                if(leagues.isEmpty()) {
                    exportReport.addItem(ReportItemType.WARNING, p.getFileName() + ": Statement splitter did not found leagues");
                    return;
                }
                
                for (String league : leagues) {
                    if (!sourceFolderPath.resolve("config/" + league).toFile().isDirectory()) {
                        sourceFolderPath.resolve("config/" + league).toFile().mkdir();
                    }
                    
                    Writer writer = null;
                    try {
                        File newFile = sourceFolderPath.resolve("config/" + league + "/statement_" + language + ".html").toFile();
                        if (!newFile.exists()) {
                            newFile.createNewFile();
                        }
                        
                        writer = new BufferedWriter(new OutputStreamWriter(
                            new FileOutputStream(newFile)));
                        writer.write("<!-- Autogenerated file! Do not edit directly. -->");
                        
                        boolean visible = true;
                        Stack<String> stack = new Stack<>();
                        
                        for (String line : lines) {
                            Matcher beginMatcher = BEGIN_MARKER.matcher(line);
                            if(beginMatcher.matches()) {
                                stack.push(beginMatcher.group(1));
                                visible = Arrays.asList(beginMatcher.group(1).split(" ")).contains(league);
                            } else if (END_MARKER.matcher(line).matches()) {
                                stack.pop();
                                visible = stack.isEmpty() ? true : Arrays.asList(stack.peek().split(" ")).contains(league);
                            } else if (visible) {
                                writer.write(line);
                            }
                        }
                        
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            writer.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                }
            }
        });
        
        return exportReport;
    }

}
